"use strict";function setOfCachedUrls(e){return e.keys().then(function(e){return e.map(function(e){return e.url})}).then(function(e){return new Set(e)})}var precacheConfig=[["/index.html","82137ad63b46f3cba159950787ddc77f"],["/static/css/main.738fc160.css","ed7ab6b7500ad1239994127a511a3d87"],["/static/js/main.273d9f5e.js","1cde61f6725f1e97da66f7c9f9482c28"],["/static/media/android.add510fd.jpg","add510fd569f0882f6d190f2bc3a3480"],["/static/media/apple.8941ff4b.jpg","8941ff4bfcbbb7a0a28deafdaac7cdb4"],["/static/media/bitbucket.1aef23d2.jpg","1aef23d2a51e2cde02380f459c30297f"],["/static/media/bootstrap.c69ca1eb.jpg","c69ca1ebaa7773c9549b95fa50fc9787"],["/static/media/cocos.9485b22c.jpg","9485b22ccec870ca9dd1abefb8a53f3d"],["/static/media/eatland.3bdd3a4e.jpg","3bdd3a4eebf316578fe71569cb554b09"],["/static/media/facebook.e72ef99a.jpg","e72ef99ac1035f79e25b7158f1e1df2f"],["/static/media/firebase.8aa183b9.jpg","8aa183b930fab7ee070581fa4c516457"],["/static/media/github.b40342c2.jpg","b40342c20512bd310c82a633ac5def8f"],["/static/media/google.f347226b.jpg","f347226b6def7540ac9348d79603be88"],["/static/media/image.478ea578.jpg","478ea57850491d117991c49c8ef4b312"],["/static/media/js.fd4d7d50.jpg","fd4d7d508c030debab6a7afe23578803"],["/static/media/mysql.51fc826d.jpg","51fc826de85ec3577de1461896b1ee16"],["/static/media/nsc3.b2cb57ba.jpg","b2cb57bad8ac0f37d7cac5ada15fad50"],["/static/media/nsc_logo.7b873464.jpg","7b87346426487bad3f12710af426238c"],["/static/media/react.b486f569.jpg","b486f569306d7ed7f32f6893387699e6"],["/static/media/redux.93e7caa7.jpg","93e7caa72c5a7b1c5292f75d893a2e3e"]],cacheName="sw-precache-v3-sw-precache-webpack-plugin-"+(self.registration?self.registration.scope:""),ignoreUrlParametersMatching=[/^utm_/],addDirectoryIndex=function(e,t){var a=new URL(e);return"/"===a.pathname.slice(-1)&&(a.pathname+=t),a.toString()},cleanResponse=function(e){if(!e.redirected)return Promise.resolve(e);return("body"in e?Promise.resolve(e.body):e.blob()).then(function(t){return new Response(t,{headers:e.headers,status:e.status,statusText:e.statusText})})},createCacheKey=function(e,t,a,n){var c=new URL(e);return n&&c.pathname.match(n)||(c.search+=(c.search?"&":"")+encodeURIComponent(t)+"="+encodeURIComponent(a)),c.toString()},isPathWhitelisted=function(e,t){if(0===e.length)return!0;var a=new URL(t).pathname;return e.some(function(e){return a.match(e)})},stripIgnoredUrlParameters=function(e,t){var a=new URL(e);return a.hash="",a.search=a.search.slice(1).split("&").map(function(e){return e.split("=")}).filter(function(e){return t.every(function(t){return!t.test(e[0])})}).map(function(e){return e.join("=")}).join("&"),a.toString()},hashParamName="_sw-precache",urlsToCacheKeys=new Map(precacheConfig.map(function(e){var t=e[0],a=e[1],n=new URL(t,self.location),c=createCacheKey(n,hashParamName,a,/\.\w{8}\./);return[n.toString(),c]}));self.addEventListener("install",function(e){e.waitUntil(caches.open(cacheName).then(function(e){return setOfCachedUrls(e).then(function(t){return Promise.all(Array.from(urlsToCacheKeys.values()).map(function(a){if(!t.has(a)){var n=new Request(a,{credentials:"same-origin"});return fetch(n).then(function(t){if(!t.ok)throw new Error("Request for "+a+" returned a response with status "+t.status);return cleanResponse(t).then(function(t){return e.put(a,t)})})}}))})}).then(function(){return self.skipWaiting()}))}),self.addEventListener("activate",function(e){var t=new Set(urlsToCacheKeys.values());e.waitUntil(caches.open(cacheName).then(function(e){return e.keys().then(function(a){return Promise.all(a.map(function(a){if(!t.has(a.url))return e.delete(a)}))})}).then(function(){return self.clients.claim()}))}),self.addEventListener("fetch",function(e){if("GET"===e.request.method){var t,a=stripIgnoredUrlParameters(e.request.url,ignoreUrlParametersMatching),n="index.html";(t=urlsToCacheKeys.has(a))||(a=addDirectoryIndex(a,n),t=urlsToCacheKeys.has(a));var c="/index.html";!t&&"navigate"===e.request.mode&&isPathWhitelisted(["^(?!\\/__).*"],e.request.url)&&(a=new URL(c,self.location).toString(),t=urlsToCacheKeys.has(a)),t&&e.respondWith(caches.open(cacheName).then(function(e){return e.match(urlsToCacheKeys.get(a)).then(function(e){if(e)return e;throw Error("The cached response that was expected is missing.")})}).catch(function(t){return console.warn('Couldn\'t serve response for "%s" from cache: %O',e.request.url,t),fetch(e.request)}))}});